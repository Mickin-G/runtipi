ARG NODE_VERSION="20.10"
ARG ALPINE_VERSION="3.18"

FROM node:${NODE_VERSION}-alpine${ALPINE_VERSION}

RUN apk add --no-cache python3 make g++ curl git
RUN npm install pnpm pm2 -g

ARG TARGETARCH
ARG DOCKER_COMPOSE_VERSION="v2.23.3"
ENV TARGETARCH=${TARGETARCH}
ENV NODE_ENV="development"

# Dashboard
WORKDIR /app

RUN echo "Building for ${TARGETARCH}"

RUN if [ "${TARGETARCH}" = "arm64" ]; then \
  curl -L -o docker-binary "https://github.com/docker/compose/releases/download/$DOCKER_COMPOSE_VERSION/docker-compose-linux-aarch64"; \
  elif [ "${TARGETARCH}" = "amd64" ]; then \
  curl -L -o docker-binary "https://github.com/docker/compose/releases/download/$DOCKER_COMPOSE_VERSION/docker-compose-linux-x86_64"; \
  fi

RUN chmod +x docker-binary

RUN mv docker-binary /usr/local/bin/docker-compose

COPY ./pnpm-lock.yaml ./
RUN pnpm fetch --ignore-scripts

COPY ./package*.json ./
COPY ./packages/worker/package.json ./packages/worker/package.json
COPY ./packages/shared/package.json ./packages/shared/package.json

RUN pnpm install -r --prefer-offline 

COPY ./packages ./packages
COPY ./tsconfig.json ./tsconfig.json
COPY ./next.config.mjs ./next.config.mjs
COPY ./public ./public

# Sentry
COPY ./sentry.client.config.ts ./sentry.client.config.ts
COPY ./sentry.edge.config.ts ./sentry.edge.config.ts
COPY ./sentry.server.config.ts ./sentry.server.config.ts

COPY ./start.dev.sh ./start.sh

CMD ["sh", "start.sh"]
