name: Publish release
on:
  workflow_dispatch:

jobs:
  create-tag:
    runs-on: ubuntu-latest
    outputs:
      tagname: ${{ steps.get_tag.outputs.tagname }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get tag from package.json
        id: get_tag
        run: |
          VERSION=$(npm run version --silent)
          echo "tagname=v${VERSION}" >> $GITHUB_OUTPUT

      - uses: rickstaa/action-create-tag@v1
        with:
          tag: ${{ steps.get_tag.outputs.tagname }}

  build-images:
    if: github.repository == 'runtipi/runtipi'
    needs: create-tag
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push images
        uses: docker/build-push-action@v5
        with:
          context: .
          build-args: |
            SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}
            TIPI_VERSION=${{ needs.create-tag.outputs.tagname }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/runtipi:${{ needs.create-tag.outputs.tagname }},ghcr.io/${{ github.repository_owner }}/runtipi:latest
          cache-from: type=registry,ref=ghcr.io/${{ github.repository_owner }}/runtipi:buildcache
          cache-to: type=registry,ref=ghcr.io/${{ github.repository_owner }}/runtipi:buildcache,mode=max

  build-worker:
    runs-on: ubuntu-latest
    needs: create-tag
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push images
        uses: docker/build-push-action@v5
        with:
          context: .
          build-args: |
            SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}
            TIPI_VERSION=${{ needs.create-tag.outputs.tagname }}
          file: ./packages/worker/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/worker:${{ needs.create-tag.outputs.tagname }},ghcr.io/${{ github.repository_owner }}/worker:latest
          cache-from: type=registry,ref=ghcr.io/${{ github.repository_owner }}/worker:buildcache
          cache-to: type=registry,ref=ghcr.io/${{ github.repository_owner }}/worker:buildcache,mode=max

  build-cli:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: create-tag
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - uses: pnpm/action-setup@v2.4.0
        name: Install pnpm
        id: pnpm-install
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "pnpm_cache_dir=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Set version
        run: pnpm -r --filter cli set-version ${{ needs.create-tag.outputs.tagname }}

      - name: Build CLI
        run: pnpm -r --filter cli package

      - name: Upload CLI
        uses: actions/upload-artifact@v4
        with:
          name: cli
          path: packages/cli/dist

  publish-release:
    runs-on: ubuntu-latest
    needs: [create-tag, build-images, build-worker, build-cli]
    outputs:
      id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Download CLI
        uses: actions/download-artifact@v4
        with:
          name: cli
          path: cli

      - name: Rename CLI
        run: |
          mv cli/bin/cli-x64 ./runtipi-cli-linux-x64
          mv cli/bin/cli-arm64 ./runtipi-cli-linux-arm64

      - name: Create release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          body: |
            **${{ needs.create-tag.outputs.tagname }}**
          tag_name: ${{ needs.create-tag.outputs.tagname }}
          name: ${{ needs.create-tag.outputs.tagname }}
          draft: false
          prerelease: true
          files: |
            runtipi-cli-linux-x64
            runtipi-cli-linux-arm64

  e2e-tests:
    needs: [create-tag, publish-release]
    uses: './.github/workflows/e2e.yml'
    secrets: inherit
    with:
      version: ${{ needs.create-tag.outputs.tagname }}

  # Promote release if e2e tests succeed
  promote:
    needs: [publish-release, e2e-tests]
    runs-on: ubuntu-latest
    steps:
      - name: Promote release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const id = '${{ needs.publish-release.outputs.id }}';
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: id,
              draft: false,
              prerelease: false
            });
