ARG NODE_VERSION="20.10"
ARG ALPINE_VERSION="3.18"

FROM node:${NODE_VERSION}-alpine${ALPINE_VERSION} AS node_base

FROM node_base AS builder_base

RUN apk add --no-cache python3 make g++ curl
RUN npm install pnpm -g

# ---- RUNNER BASE ----
FROM node_base AS runner_base

RUN apk add curl openssl git && rm -rf /var/cache/apk/*
RUN npm i -g pm2

# ----- BUILDER ----
FROM builder_base AS builder

WORKDIR /build

ARG TARGETARCH
ENV TARGETARCH=${TARGETARCH}
ARG DOCKER_COMPOSE_VERSION="v2.23.3"

RUN echo "Building for ${TARGETARCH}"


RUN if [ "${TARGETARCH}" = "arm64" ]; then \
  curl -L -o docker-binary "https://github.com/docker/compose/releases/download/$DOCKER_COMPOSE_VERSION/docker-compose-linux-aarch64"; \
  elif [ "${TARGETARCH}" = "amd64" ]; then \
  curl -L -o docker-binary "https://github.com/docker/compose/releases/download/$DOCKER_COMPOSE_VERSION/docker-compose-linux-x86_64"; \
  else \
  echo "Unsupported architecture"; \
  fi

RUN strip docker-binary
RUN chmod +x docker-binary

COPY ./pnpm-lock.yaml ./
RUN pnpm fetch

COPY ./pnpm-workspace.yaml ./
COPY ./package*.json ./
COPY ./packages ./packages

RUN pnpm install -r --prefer-offline 
COPY ./src ./src
COPY ./tsconfig.json ./tsconfig.json
COPY ./next.config.mjs ./next.config.mjs
COPY ./public ./public
COPY ./tests ./tests

# Sentry
COPY ./sentry.client.config.ts ./sentry.client.config.ts
COPY ./sentry.edge.config.ts ./sentry.edge.config.ts
COPY ./sentry.server.config.ts ./sentry.server.config.ts

ARG SENTRY_AUTH_TOKEN
ARG SENTRY_DISABLE_AUTO_UPLOAD
ARG TIPI_VERSION

ENV SENTRY_AUTH_TOKEN=${SENTRY_AUTH_TOKEN}
ENV SENTRY_DISABLE_AUTO_UPLOAD=${SENTRY_DISABLE_AUTO_UPLOAD}
ENV TIPI_VERSION=${TIPI_VERSION}

RUN pnpm build

COPY ./packages/worker/build.js ./packages/worker/build.js
COPY ./packages/worker/src ./packages/worker/src
COPY ./packages/worker/package.json ./packages/worker/package.json
COPY ./packages/worker/assets ./packages/worker/assets

RUN pnpm -r build --filter @runtipi/worker

# ---- RUNNER ----
FROM runner_base AS app

USER 1000:1000

WORKDIR /app
COPY ./pm2.config.js ./pm2.config.js

ENV NODE_ENV=production

COPY --from=builder /build/next.config.mjs ./
COPY --from=builder /build/public ./public
COPY --from=builder --chown=1000:1000 /build/.next/standalone ./
COPY --from=builder --chown=1000:1000 /build/.next/static ./.next/static

COPY --from=builder --chown=1000:1000 /build/packages/worker/dist .
COPY --from=builder --chown=1000:1000 /build/packages/worker/assets ./assets
COPY --from=builder --chown=1000:1000 /build/docker-binary /usr/local/bin/docker-compose

CMD ["pm2-runtime", "start", "/app/pm2.config.js"]
